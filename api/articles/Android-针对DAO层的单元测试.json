{"title":"Android-针对DAO层的单元测试","slug":"Android-针对DAO层的单元测试","date":"2018-07-30T01:06:04.000Z","updated":"2018-12-07T11:51:32.610Z","comments":true,"excerpt":"","content":"<p>Android的单元测试大家都不陌生，必要的单元测试可以提高工作效率，省去大量的在Android真机或者虚拟机上的调试，提高代码质量。尤其是在团队项目开发中，为自己写的代码负责，提高项目后期的可维护性。这篇文章算是个人心得体会吧。<br>前几天接了一个任务就是对团队中现有的一个项目的dao层写单元测试（数据访问对象），该项目中的数据库适配器（MyDataBaseAdapter）中集成了大量的关于数据库中增，删，改，查的方法，现在要测试这些函数的功能。然后就遇到了一些问题，比如说不能对原有的数据库带来脏数据，而且要测试这些方法还必须要在数据库中测试。搜集了一些资料比如Spring结合junit利用对数据库的回滚操作进行测试。但还是找到了更好的方法，就是robolectric框架。<br>有关Robolectric测试框架的详细知识个人感觉简书：键盘男<a href=\"https://www.jianshu.com/u/0ef3dc77079c他的博客写的是很不错的有关其他的测试可以参考一下。\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/0ef3dc77079c他的博客写的是很不错的有关其他的测试可以参考一下。</a><br>接下来总结一下对dao层的测试。</p>\n<h4 id=\"添加依赖，-3-3-2并不是最新版本\"><a href=\"#添加依赖，-3-3-2并不是最新版本\" class=\"headerlink\" title=\"添加依赖，(3.3.2并不是最新版本)\"></a>添加依赖，(3.3.2并不是最新版本)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testCompile &apos;org.robolectric:robolectric:3.3.2&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定义数据工具类\"><a href=\"#定义数据工具类\" class=\"headerlink\" title=\"定义数据工具类\"></a>定义数据工具类</h4><p>定义的字段对应之前数据库的字段（比如原数据库需要测试id或name的删除更新等，根据需求定义）<br>如果数据库表字段较少，可以直接插入数据，不用定义该类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseInfo &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    private int id(字段1)；</span><br><span class=\"line\">    private String name(字段2);</span><br><span class=\"line\">               ·</span><br><span class=\"line\">               ·</span><br><span class=\"line\">               ·</span><br><span class=\"line\">               ·</span><br><span class=\"line\">               ·</span><br><span class=\"line\">    private int 字段13；</span><br><span class=\"line\">    private String 字段14;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    public BaseInfo(int id,String name,``````,) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    this.id=id;</span><br><span class=\"line\">    this.name=name;</span><br><span class=\"line\">            `</span><br><span class=\"line\">            `</span><br><span class=\"line\">            `</span><br><span class=\"line\">     this.XX=XX;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">设置geter和seter</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####定义各表字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"定义测试用的insert函数（将数据插入数据库）\"><a href=\"#定义测试用的insert函数（将数据插入数据库）\" class=\"headerlink\" title=\"定义测试用的insert函数（将数据插入数据库）\"></a>定义测试用的insert函数（将数据插入数据库）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Long insertTestData(BasemInfo basemInfo)&#123;</span><br><span class=\"line\">                //hashmap保存表列与数据</span><br><span class=\"line\">\t\tContentValues initialValues = new ContentValues();</span><br><span class=\"line\">\t\tinitialValues.put(列名._ID,baseInfo.getID());</span><br><span class=\"line\">\t\t`</span><br><span class=\"line\">                `</span><br><span class=\"line\">                `</span><br><span class=\"line\">                `</span><br><span class=\"line\">\t\tinitialValues.put(列名.NAME,baseInfo.getNAME());</span><br><span class=\"line\">\t\treturn  mSQLiteDatabase.insert(数据库表名, null, initialValues);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试之前的环境配置\"><a href=\"#测试之前的环境配置\" class=\"headerlink\" title=\"测试之前的环境配置\"></a>测试之前的环境配置</h4><p>用这个框架测试之前建立一个新的数据库，用于各种测试，每个测试结束后自动删除数据库，所以不用担心对原有的数据库造成干扰。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(RobolectricTestRunner.class)//Robolectric是一个单元测试框架，可以对Android SDK jar进行消除</span><br><span class=\"line\">@Config(constants = BuildConfig.class, sdk = 21, manifest = Config.NONE)//配置环境sdk版本等等</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 该类用于测试数据库的一些增删改查的方法</span><br><span class=\"line\"> * 测试用类</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestMyDataBaseAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyDataBaseAdapter myDataBaseAdapter;</span><br><span class=\"line\">    private SQLiteDatabase mSQliteDatabase;</span><br><span class=\"line\">    private Context mContext;</span><br><span class=\"line\">    //用来添加一条模拟数据（自定义的数据bean类，收集数据且对应数据库字段）</span><br><span class=\"line\">    private static BaseInfo testBaseInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void setUp() &#123;</span><br><span class=\"line\">        //创建并打开数据库</span><br><span class=\"line\">        myDataBaseAdapter =new MyDataBaseAdapter(RuntimeEnvironment.application);</span><br><span class=\"line\">        //获得测试环境</span><br><span class=\"line\">        mContext = RuntimeEnvironment.application;</span><br><span class=\"line\">        mSQliteDatabase = myDataBaseAdapter.getSQLiteDatabase();</span><br><span class=\"line\">        //输出log</span><br><span class=\"line\">        ShadowLog.stream=System.out;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 测试用的模拟数据</span><br><span class=\"line\">         */</span><br><span class=\"line\">        testBaseInfo=new BaseInfo(</span><br><span class=\"line\">                4,//数据id=4</span><br><span class=\"line\">                张三,//下面均为虚拟测试数据（每个数据对应数据库表的字段，根据被测的函数模拟即可）</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                null,</span><br><span class=\"line\">                &quot;测试1&quot;,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                1000,</span><br><span class=\"line\">                &quot;a&quot;,</span><br><span class=\"line\">                false,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                null,</span><br><span class=\"line\">                null,</span><br><span class=\"line\">                (byte)1,</span><br><span class=\"line\">                (byte)0,</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @After</span><br><span class=\"line\">    public void tearDown() &#123;</span><br><span class=\"line\">        //结束测试关闭数据库</span><br><span class=\"line\">        myDataBaseAdapter.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据id更新name</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void update() &#123;</span><br><span class=\"line\">        //数据库表插入测试数据</span><br><span class=\"line\">        myDataBaseAdapter.insertTestData(testBaseInfo);</span><br><span class=\"line\">        //调用被测试的方法update，修改id=4的name值为李四（原本为张三）</span><br><span class=\"line\">        //输入期望的值</span><br><span class=\"line\">        int expectValues=李四;</span><br><span class=\"line\">        myDataBaseAdapter.update(testBaseInfo.getID(),expectValues);</span><br><span class=\"line\">        Cursor cursor= myDataBaseAdapter.getDataByTimerId(testBaseInfo.getID());</span><br><span class=\"line\">        //利用Cursor查出来真实的值（也可以直接用Sql语句）</span><br><span class=\"line\">        cursor.moveToFirst();</span><br><span class=\"line\">        String t actualValues=cursor.getString(MyDataBaseAdapter.NAME_INDEX);</span><br><span class=\"line\">        //对比两者值是否相同</span><br><span class=\"line\">        cursor.close();</span><br><span class=\"line\">        Assert.assertEquals(expectValues,actualValues);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新Xxxx</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void updateXxxx() &#123;</span><br><span class=\"line\">         1.测试数据插入数据库</span><br><span class=\"line\">         2.调用被测函数，修改对应参数的值（期望值）</span><br><span class=\"line\">         3.取出该数据（真实值）</span><br><span class=\"line\">         4.期望值与真实值比较</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     /**</span><br><span class=\"line\">     * 插入Xxxx</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void insertXxxx() &#123;</span><br><span class=\"line\">         1.调用被测函数，插入一条数据（期望值）</span><br><span class=\"line\">         2.取出该数据（真实值）</span><br><span class=\"line\">         3.期望值与真实值比较</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">            ·</span><br><span class=\"line\">            ·</span><br><span class=\"line\">            ·</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>查找，删除等也可以用类似的思想单元测试。<br>正在学习安卓，希望能够多积累，多提升</p>\n","thumbnail":"/img/God_of_War.jpg","categories":[{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"}]}